define token instr32(32)
	t32_opcode = (24, 31)
	t32_opcodeH= (28, 31)
	cond       = (24, 27)
	t32_addr1  = (12, 23)
	t32_addr2  = ( 0, 11)

	t32_imm1   = (12, 23)
	t32_imm2   = ( 0, 11)

	t32_imm    = ( 0, 23)

	t32_branch = ( 0, 11)
;

cc: "eq" is cond=2        { export ZR; }
cc: "ne" is cond=1        { tmp:1 = !ZR; export tmp; }
cc: "gt" is cond=3        { tmp:1 = NG; export tmp; }
cc: "lt" is cond=4        { tmp:1 = (!NG && !ZR); export tmp; }
COND: cc is cc { if (!cc) goto inst_next; }   # Execute conditionally

addr1: t32_addr1 is t32_addr1 {
	export *[ram]:4 t32_addr1;
}

addr2: t32_addr2 is t32_addr2 {
	export *[ram]:4 t32_addr2;
}

addr1_128: t32_addr1 is t32_addr1 {
	export *[ram]:16 t32_addr1;
}

addr2_128: t32_addr2 is t32_addr2 {
	export *[ram]:16 t32_addr2;
}

branchAddress: t32_branch is t32_branch {
	export *[rom]:$(ADDRSIZE) t32_branch;
}

imm1: immed is t32_imm1 [immed = 0 + t32_imm1;] {
	local tmp:$(REGSIZE) = immed;
	export tmp;
}

imm2: immed is t32_imm2 [immed = 0 + t32_imm2;] {
	local tmp:$(REGSIZE) = immed;
	export tmp;
}

imm: immed is t32_imm [immed = 0 + t32_imm;] {
	local tmp:$(REGSIZE) = immed;
	export tmp;
}

:mov addr1, addr2 is t32_opcode=0x0B & addr1 & addr2 {
	addr2 = addr1;
}

:movp addr1, addr2 is t32_opcode=0x0D & addr1 & addr2 {
	addr2 = *[ram]:4 addr1;
}

:movpp addr1, addr2 is t32_opcode=0x0E & addr1 & addr2 {
	*[ram]:4 addr2 = *[ram]:4 addr1;
}

:cmp addr1, addr2 is t32_opcode=0x13 & addr1 & addr2 {
	local tmp:$(REGSIZE) = addr1;
	local tmp2:$(REGSIZE) = addr2;
	resultflags2(tmp, tmp2);
	affectflags();
}

:subpp addr1, addr2 is t32_opcode=0x16 & addr1 & addr2 {
	local tmp:$(REGSIZE) = *[ram]:4 addr1;
	local res:$(REGSIZE) = tmp - *[ram]:4 addr2;

	subflags(tmp, addr2);
	resultflags(res);
	affectflags();
}


:add addr1, addr2 is t32_opcode=0x1B & addr1 & addr2 {
	local tmp:$(REGSIZE) = addr1;
	local res:$(REGSIZE) = tmp + addr2;
	addr2 = res;

	logicflags();
	affectflags();
}

:mov16 addr1, addr2 is t32_opcode=0x43 & addr1 & addr2 {
    local tmp_hi:$(REGSIZE) = addr2 & 0xffff0000;
    local tmp_lo:$(REGSIZE) = addr1 & 0x0000ffff;
    addr2 = tmp_hi | tmp_lo;
}

:orp addr1, addr2 is t32_opcode=0x44 & addr1 & addr2 {
	local tmp:$(REGSIZE) = addr1;
	local res:$(REGSIZE) = tmp | *[ram]:4 addr2;
	*[ram]:4 addr2 = res;

	logicflags();
	affectflags();
}

:xor addr1, addr2 is t32_opcode=0x4B & addr1 & addr2 {
	local tmp:$(REGSIZE) = addr1;
	local res:$(REGSIZE) = tmp ^ addr2;
	addr2 = res;

	logicflags();
	affectflags();
}

:mov128 addr1_128, addr2_128 is t32_opcode=0x53 & addr1_128 & addr2_128 {
	addr2_128 = addr1_128;
}

:inc addr1 is t32_opcode=0x80 & addr1 {
	local tmp:$(REGSIZE) = addr1;
	local res:$(REGSIZE) = tmp + 1;
	addr1 = res;

	addflags(tmp, 1);
	resultflags(res);
	affectflags();
}

:dec addr1 is t32_opcode=0x88 & addr1 {
	local tmp:$(REGSIZE) = addr1;
	local res:$(REGSIZE) = tmp - 1;
	addr1 = res;

	subflags(tmp, 1);
	resultflags(res);
	affectflags();
}

:shl addr1, imm2 is t32_opcode=0x90 & addr1 & imm2 {
	addr1 = (addr1 << imm2);
}

:shr addr1, imm2 is t32_opcode=0x98 & addr1 & imm2 {
	addr1 = (addr1 >> imm2);
}

define pcodeop __builtin_setmode;
:setmode addr1, imm2 is t32_opcode=0xA0 & addr1 & imm2 {
	__builtin_setmode(addr1, imm2);
}

define pcodeop __builtin_byteswap;
:byteswap addr1 is t32_opcode=0xB0 & addr1 {
	addr1 = __builtin_byteswap(addr1);
}

:bcheck addr1, imm2 is t32_opcode=0xC0 & addr1 & imm2 {
	local tmp = addr1 & (1 << imm2);
	local tmp2 = 1 << imm2;
	resultflags2(tmp, tmp2);
	affectflags();
}

:bset addr1, imm2 is t32_opcode=0xC8 & addr1 & imm2 {
	local tmp:$(REGSIZE) = addr1;
	tmp = tmp | (1 << imm2);
	addr1 = tmp;
}

:bclear addr1, imm2 is t32_opcode=0xD0 & addr1 & imm2 {
	local tmp:$(REGSIZE) = addr1;
	tmp = tmp & (~(1 << imm2));
	addr1 = tmp;
}

:clrz is t32_opcode=0xDA {
	tmpZR = 0;
	ZR = 0;
}

:setz is t32_opcode=0xDB {
	tmpZR = 1;
	ZR = 1;
}

:b branchAddress is t32_opcode=0xE0 & branchAddress {
	goto branchAddress;
}

:b^COND branchAddress is t32_opcodeH=0xE & COND & branchAddress {
	build COND;
	goto branchAddress;
}

:call branchAddress is t32_opcode=0xe8 & branchAddress {
	ra = inst_next;
	call branchAddress;
}

:ret is t32_opcode=0xF0 {
	return [ra];
}

define pcodeop __builtin_intr;
:dma imm is t32_opcode=0xF8 & imm {
	__builtin_intr(imm);
}
